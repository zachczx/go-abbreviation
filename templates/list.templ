package templates

import (
  "go-abbreviation/models"
)

templ List(title string, abv models.List, keyword string) {
    @Layout(title) {
        <main class="grid h-auto content-start justify-items-center lg:m-10">
          <section class="h-full space-y-10 rounded-3xl border border-gray-200 bg-gray-50/70 p-4 backdrop-blur-md lg:w-[60rem]">
            <div>
              <h1 class="view-headline text-4xl font-bold text-primary lg:text-8xl"><a href="/">Abbreviation</a></h1>
            </div>
            
            <div class="space-y-8">
              @SearchBar(keyword)
              <ul class="scroller overflow-auto rounded-3xl pe-4 ps-1 text-xl lg:max-h-[70vh]">
                <li class="grid grid-cols-3 border-b-2 border-b-gray-300 py-2 font-extrabold">
                  <div class="col-span-1">Short Form</div>
                  <div class="col-span-2">Long Form</div>
                </li>
                
                for i := 0; i < len(abv.List); i++ {
                    <li class="abvEntry grid grid-cols-3 border-b-2 border-b-gray-300 py-2" id={abv.List[i].Short}>
                      <div class="col-span-1">{ abv.List[i].Short }</div>
                      <div class="col-span-2">{ abv.List[i].Long }</div>
                    </li>
                }
              </ul>
            </div>
          </section>
        </main>
        @FilterJs()
    }
}

templ SearchBar(keyword string) {
  <label class="view-input relative min-w-44">
    <input type="text" id="search" value={keyword} placeholder="Type a keyword to search" name="keyword" class="input input-bordered input-primary h-10 w-full rounded-full lg:h-16 lg:text-xl" />
    <button class="absolute bottom-0 right-[0.5rem] top-0 my-auto h-8 w-8 lg:h-14 lg:w-14">
      <svg xmlns="http://www.w3.org/2000/svg" class="h-full w-full fill-primary hover:saturate-50" viewBox="0 0 24 24"><path d="m12 16l4-4l-4-4l-1.4 1.4l1.6 1.6H8v2h4.2l-1.6 1.6zm0 6q-2.075 0-3.9-.788t-3.175-2.137T2.788 15.9T2 12t.788-3.9t2.137-3.175T8.1 2.788T12 2t3.9.788t3.175 2.137T21.213 8.1T22 12t-.788 3.9t-2.137 3.175t-3.175 2.138T12 22"/></svg>
    </button>
  </label>
}

templ FilterJs() {
  <script>
    const abvElements = document.getElementsByClassName("abvEntry")
    const filterInput = document.getElementById("filter")

    if (filterInput.value) {
      for (let i = 0; i < abvElements.length; i++) {
        abvElements[i].classList.add("hidden")
        const tempVar = abvElements[i]
        const elIsFound = tempVar.innerHTML.toLowerCase().includes(filterInput.value.toLowerCase())
        if (elIsFound) {
          tempVar.classList.remove("hidden")
          console.log("Found")
        } else {
          console.log("Not Found")
        }
      }
    }
    
    filterInput.addEventListener("keyup", (evt) => {
      
      for (let i = 0; i < abvElements.length; i++) {
        abvElements[i].classList.add("hidden")
        const tempVar = abvElements[i]
        const elIsFound = tempVar.innerHTML.toLowerCase().includes(evt.target.value.toLowerCase())
        if (elIsFound) {
          tempVar.classList.remove("hidden")
          console.log("Found")
        } else {
          console.log("Not Found")
        }
      }
    })
  </script>
}

templ CheckDuplicate(title string, abv models.List) {
  <html>
    <body>
  <ul>
  for i := 0; i < len(abv.List); i++ {
    <li id={abv.List[i].Short}>
      { abv.List[i].Short } ----------- { abv.List[i].Long }
    </li>
  }
</ul>

<script>
const listEl = document.querySelectorAll("li")
let newArray = []
let duplicates = []
console.log(listEl)

for (let i=0; i < listEl.length; i++) {
  let tempid = listEl[i].id
  if (newArray.includes(listEl[i].id)) {
    console.log("Duplicate: ", tempid)
  } else {
    newArray.push(tempid)
  }
}
</script>
</body></html>
}