package templates

import (
  "go-abbreviation/models"
)

templ ListAll(title string, abv []models.AbvDb, count string, keyword string) {
  @Layout(title) {
        <main class="grid h-auto content-start justify-items-center lg:pb-10 pb-6 lg:pt-4">
          <div class="h-full rounded-3xl border border-gray-200 bg-gray-50/70 backdrop-blur-md max-w-[60rem] w-full md:shadow-lg">
            <section class="p-4 lg:p-8">
            @Logo()
            </section>
            
            <section class="space-y-8 min-h-[70vh]">
              <div class="bg-primary/10 pt-8 pb-6 px-4 lg:px-8"><!-- pb-4 because there's some margins caused by rounded alphabets, pt-8 makes it right -->
                @FilterBar(keyword)
                @Alphabets()
              </div>
              <ul id="list" class="scroller grid w-full overflow-auto text-xl lg:max-h-[70vh] px-2 lg:px-4 pb-4 xl:px-8">
                <li class="grid grid-cols-3 p-2">
                  <div class="col-span-1 font-extrabold">Short</div>
                  <div class="col-span-2 flex">
                    <span class="grow font-extrabold">Long</span>
                    <span class="justify-end text-base items-end">{count} results</span>
                  </div>
                </li>
                @Loader()
                for i := 0; i < len(abv); i++ {
                    <li class="loaded-content hover:bg-primary/70 hover:rounded-lg hover:text-base-100 grid grid-cols-3 border-t border-t-gray-300 p-2">
                      <div class="col-span-1">{ abv[i].Short }</div>
                      <div class="col-span-2">{ abv[i].Long }</div>
                    </li>
                }
              </ul>
            </section>
          </div>
        </main>
        <script>
          let alphabetsSelected
        </script>
    }
}

templ ListFilteredResult(abv []models.AbvDb, count string) {

    <li class="grid grid-cols-3 p-2">
      <div class="col-span-1 font-extrabold">Short</div>
      <div class="col-span-2 flex">
        <span class="grow font-extrabold">Long</span>
        <span class="justify-end text-base items-end">{count} results</span>
      </div>
    </li>
    @Loader()
    if len(abv) == 0 {
      <div class="grid justify-items-center py-4 border-t border-t-gray-300 loaded-content">
        <img src="/static/images/questions-bro.svg" width="500" height="500" alt="Nothing found">
      </div>
    }
    for i := 0; i < len(abv); i++ {
      <li class="loaded-content hover:bg-primary/70 hover:rounded-lg hover:text-base-100 grid grid-cols-3 border-t border-t-gray-300 p-2">
        <div class="col-span-1">{ abv[i].Short }</div>
        <div class="col-span-2">{ abv[i].Long }</div>
      </li>
    }

}

templ FilterBar(keyword string) {
<div class="wrapper space-y-2">
    <form method="get" action="/search" hx-get="/search" hx-push-url="true" hx-indicator=".loader,.loaded-content" hx-trigger="submit, keydown delay:0.7s" hx-target="#list" hx-swap="innerHTML transition:true">
    <label class="relative min-w-44">
      <input type="text" id="filter" value={keyword} placeholder="Type a keyword to search" name="q" class="input input-bordered input-primary h-10 w-full rounded-full lg:h-16 lg:text-xl" />
      <button id="filter-button" class="absolute bottom-0 right-[0.5rem] top-0 my-auto rounded-full h-7 w-7 lg:w-12 lg:h-12 flex justify-center hover:saturate-50 items-center bg-primary">
        <svg id="tabler:arrow-big-right-filled" xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 lg:w-7 lg:h-7 fill-base-100" viewBox="0 0 24 24"><path d="M12.089 3.634A2 2 0 0 0 11 5.414L10.999 8H4a2 2 0 0 0-2 2v4l.005.15A2 2 0 0 0 4 16l6.999-.001l.001 2.587A2 2 0 0 0 14.414 20L21 13.414a2 2 0 0 0 0-2.828L14.414 4a2 2 0 0 0-2.18-.434z"/></svg>
      </button>
    </label>
  </form>

</div>
}

var alphabets = []string{"A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "0-9"}

templ Alphabets() {
  <div class="flex flex-wrap justify-center pt-4">
    <form method="get" preload>
      for i := 0; i < len(alphabets); i++ {
        <button hx-get={"/" + alphabets[i]} hx-trigger="click" hx-push-url="true" hx-indicator=".loader,.loaded-content" hx-target="#list" hx-swap="innerHTML" class="alphabet font-bold hover:rounded-3xl hover:bg-primary/70 px-2 hover:text-base-100">{alphabets[i]}</button>     
      }
    </form>
    <div class="flex items-center"><svg xmlns="http://www.w3.org/2000/svg" class="inline" width="1em" height="1em" viewBox="0 0 24 24"><path fill="#4490FF" d="M9.575 12L5 7.4L6.4 6l6 6l-6 6L5 16.6zm6.6 0L11.6 7.4L13 6l6 6l-6 6l-1.4-1.4z"/></svg></div>
    <form class="flex items-center">
      <button id="view-all-button" hx-get="/all/" hx-trigger="click" hx-push-url="true" hx-indicator=".loader,.loaded-content" hx-target="#list" hx-swap="innerHTML" class="rounded-full font-bold hover:bg-primary/70 px-2 hover:text-base-100" preload>All</button>
    </form>
  </div>

  <script>
    alphabetsSelected = document.querySelectorAll('.alphabet')
    let alphabetsSelectedCopy = alphabetsSelected
    const alphabetsSelectedClasses = ['rounded-full', 'bg-primary/70', 'text-base-100']
    for (let i = 0; i < alphabetsSelected.length; i++) {
      alphabetsSelected[i].addEventListener('click', (evt) => {
          evt.target.classList.add(...alphabetsSelectedClasses)
          let alphabetsSelectedCopyFiltered = Array.from(alphabetsSelectedCopy).filter(el => el !== evt.target)
          alphabetsSelectedCopyFiltered.forEach((el) => {
            el.classList.remove(...alphabetsSelectedClasses)
          })
      })
    }

    const viewAllButton = document.getElementById('view-all-button')
    viewAllButton.addEventListener('click', (evt) => {
      alphabetsSelectedCopy.forEach((el) => {
        el.classList.remove(...alphabetsSelectedClasses)
      })
    })
  </script>

}

templ Loader() {
  <div class="loader min-h-96 border-t border-t-gray-300 flex justify-center items-center"> <!-- absolute properties in css file -->
    <!-- <span class="loading loading-lg text-primary"></span> -->
    <span class="loader-img"></span>
  </div>
}